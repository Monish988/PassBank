package com.example.passbank.Screens

import android.content.ClipData
import android.widget.Toast
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.text.selection.SelectionContainer
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.Slider
import androidx.compose.material3.SliderDefaults
import androidx.compose.material3.Switch
import androidx.compose.material3.SwitchDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalClipboardManager
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.passbank.R
import com.example.passbank.ui.theme.detaile1
import com.example.passbank.ui.theme.detaile2


fun generatepass(length: Int,Symbols:Boolean,Numbers:Boolean,uppercase:Boolean):String{
    val lowercaseletters = "abcdefghijklmnopqrstuvwxyz"
    val uppercaseletters =   lowercaseletters.uppercase()
    val numbers = "0123456789"
    val symbols = "!@#$%^&*()-_=+[]{}|;:',.<>?/"
    var charset = lowercaseletters
    if(Symbols) charset +=symbols
    if(Numbers) charset +=numbers
    if(uppercase) charset +=uppercaseletters
    return (1..length)
        .map { charset.random() }
        .joinToString("")


}
@Composable
fun gener(navController: NavController) {
    val context = LocalContext.current.applicationContext
    val clipboardManager = LocalClipboardManager.current


    var password by rememberSaveable {
        mutableStateOf("")
    }
    var clipData: ClipData = ClipData.newPlainText("password", password)


    var length by rememberSaveable {
        mutableStateOf(12)
    }
    var symbols by rememberSaveable {
        mutableStateOf(false)
    }
    var numbers by rememberSaveable {
        mutableStateOf(false)
    }
    var uppercase by rememberSaveable {
        mutableStateOf(false)
    }
    var isgenerated by rememberSaveable {
        mutableStateOf(false)
    }
    Column(
        modifier = Modifier.fillMaxSize()
    ){
        Topappbar(title = "Generate Password")


        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(Color.Black),
            verticalArrangement = Arrangement.Center,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {

            AnimatedVisibility(visible = isgenerated) {


                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.Center,
                    modifier = Modifier
                        .fillMaxWidth()
                ) {


                    SelectionContainer {


                        Text(
                            text = password,
                            color = Color.White,
                            fontSize = 28.sp,
                            fontWeight = FontWeight.SemiBold,
                            modifier = Modifier
                                .weight(5f)
                        )
                    }
                    Spacer(modifier = Modifier.width(12.dp))
                    Icon(painter = painterResource(id = R.drawable.copy),
                        contentDescription = null,
                        tint = Color.White,
                        modifier = Modifier
                            .size(22.dp)
                            .clickable {
                                clipboardManager.setText(
                                    AnnotatedString(
                                        text = password
                                    )
                                )
                                Toast
                                    .makeText(context, "Copied", Toast.LENGTH_SHORT)
                                    .show()


                            }
                    )
                }
            }
            Spacer(modifier = Modifier.height(23.dp))
            Text(text = "PasswordLength: $length", color = Color.White)
            Slider(
                value = length.toFloat(),
                onValueChange = {
                    length = it.toInt()
                },
                colors = SliderDefaults.colors(
                    activeTrackColor = detaile1,
                    inactiveTickColor = Color.White,
                    activeTickColor = detaile1,
                    inactiveTrackColor = detaile2,
                    thumbColor = detaile1
                ),
                valueRange = 8f..20f,
                steps = 12,
                modifier = Modifier
                    .fillMaxWidth()
            )
            Spacer(modifier = Modifier.height(8.dp))
            Row(
                modifier = Modifier
                    .fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                Column {


                    Text(text = "Symbols", color = Color.White)
                    Switch(
                        checked = symbols, onCheckedChange = {
                            symbols = !symbols
                        },
                        colors = SwitchDefaults.colors(
                            uncheckedBorderColor = detaile1,
                            checkedBorderColor = detaile1,
                            uncheckedThumbColor = detaile1,
                            checkedThumbColor = detaile1,
                            uncheckedIconColor = Color.White,
                            uncheckedTrackColor = Color.DarkGray,
                            checkedTrackColor = Color.Gray
                        )
                    )
                }
                Column {


                    Text(text = "numbers", color = Color.White)
                    Switch(
                        checked = numbers, onCheckedChange = {
                            numbers = !numbers
                        },
                        colors = SwitchDefaults.colors(
                            uncheckedBorderColor = detaile1,
                            checkedBorderColor = detaile1,
                            uncheckedThumbColor = detaile1,
                            checkedThumbColor = detaile1,
                            uncheckedIconColor = Color.White,
                            uncheckedTrackColor = Color.DarkGray,
                            checkedTrackColor = Color.Gray
                        )
                    )
                }
                Column {


                    Text(text = "uppercase", color = Color.White)
                    Switch(
                        checked = uppercase, onCheckedChange = {
                            uppercase = !uppercase
                        },
                        colors = SwitchDefaults.colors(
                            uncheckedBorderColor = detaile1,
                            checkedBorderColor = detaile1,
                            uncheckedThumbColor = detaile1,
                            checkedThumbColor = detaile1,
                            uncheckedIconColor = Color.White,
                            uncheckedTrackColor = Color.DarkGray,
                            checkedTrackColor = Color.Gray
                        )
                    )
                }


            }
            Spacer(modifier = Modifier.height(16.dp))
            Button(
                onClick = {
                    password = generatepass(
                        length = length,
                        Symbols = symbols,
                        Numbers = numbers,
                        uppercase = uppercase
                    )
                    isgenerated = true
                },
                colors = ButtonDefaults.buttonColors(containerColor = detaile2)
            ) {
                Text(text = "Generate Password")

            }

        }



    }

}
